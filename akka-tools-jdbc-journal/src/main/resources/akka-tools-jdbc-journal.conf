akka.persistence.journal.plugin = "jdbc-journal"
akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

akka.persistence.query.jdbc-read-journal {
  class = "no.nextgentel.oss.akkatools.persistence.jdbcjournal.JdbcReadJournalProvider"
  jdbcJournalRuntimeDataFactory = "no.nextgentel.oss.akkatools.persistence.jdbcjournal.SingletonJdbcJournalRuntimeDataFactory"
  refresh-interval = 3s
}

jdbc-journal {
  # Class name of the plugin.
  class = "no.nextgentel.oss.akkatools.persistence.jdbcjournal.JdbcAsyncWriteJournal"
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "jdbc-journal-dispatcher-dispatcher"
  jdbcJournalRuntimeDataFactory = "no.nextgentel.oss.akkatools.persistence.jdbcjournal.SingletonJdbcJournalRuntimeDataFactory"
}

jdbc-snapshot-store {
  # Class name of the plugin.
  class = "no.nextgentel.oss.akkatools.persistence.jdbcjournal.JdbcSnapshotStore"
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "jdbc-journal-dispatcher-dispatcher"
  jdbcJournalRuntimeDataFactory = "no.nextgentel.oss.akkatools.persistence.jdbcjournal.SingletonJdbcJournalRuntimeDataFactory"
}

jdbc-journal-dispatcher-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = fork-join-executor
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}
